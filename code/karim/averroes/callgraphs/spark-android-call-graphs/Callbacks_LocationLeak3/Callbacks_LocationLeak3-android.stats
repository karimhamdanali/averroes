...
running Spark for Callbacks_LocationLeak3
Loading properties...
Generating the call graph for an Android apk.
[main] INFO soot.jimple.infoflow.android.SetupApplication - ARSC file parsing took 0.032166703 seconds
Using 'android/android-17/android.jar' as android.jar
[main] INFO soot.jimple.infoflow.entryPointCreators.AndroidEntryPointCreator - Generated main method:
    public static void dummyMainMethod()
    {
        int $i0;
        de.ecspride.LocationLeak3 $r0;
        android.os.Bundle $r1;

        $i0 = 0;

     label0:
        $r0 = new de.ecspride.LocationLeak3;
        specialinvoke $r0.<de.ecspride.LocationLeak3: void <init>()>();
        if $i0 == 0 goto label6;

     label1:
        $r1 = new android.os.Bundle;
        specialinvoke $r1.<android.os.Bundle: void <init>()>();
        virtualinvoke $r0.<de.ecspride.LocationLeak3: void onCreate(android.os.Bundle)>($r1);
        $r1 = null;

     label2:
        virtualinvoke $r0.<de.ecspride.LocationLeak3: void onResume()>();
        if $i0 == 1 goto label3;

        if $i0 == 2 goto label2;

        if $i0 == 3 goto label1;

     label3:
        if $i0 == 4 goto label5;

        if $i0 == 5 goto label4;

        if $i0 == 6 goto label1;

     label4:
        if $i0 == 7 goto label2;

     label5:
        if $i0 == 8 goto label6;

     label6:
        if $i0 == 9 goto label0;

        return;
    }

Warning: java.lang.ref.Finalizer is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.3 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 6.8 seconds.
[Spark] Solution found in 6.8 seconds.
Callback analysis done.
Warning: TextView is a phantom class!
Warning: de.ecspride.TextView is a phantom class!
Warning: android.view.TextView is a phantom class!
Found 0 layout controls in file res/layout/activity_multi_handlers1.xml
Transforming dummyMainClass... 
Transforming de.ecspride.LocationLeak3... 
Using 'android/android-17/android.jar' as android.jar
[main] WARN soot.jimple.infoflow.entryPointCreators.AndroidEntryPointCreator - Ran into a constructor generation loop for class android.location.Location, substituting with null...
[main] INFO soot.jimple.infoflow.entryPointCreators.AndroidEntryPointCreator - Generated main method:
    public static void dummyMainMethod()
    {
        int $i0;
        de.ecspride.LocationLeak3 $r0;
        android.os.Bundle $r1;
        de.ecspride.MyLocationListener $r2;
        android.location.Location $r3, $r4;

        $i0 = 0;

     label0:
        $r0 = new de.ecspride.LocationLeak3;
        specialinvoke $r0.<de.ecspride.LocationLeak3: void <init>()>();
        if $i0 == 0 goto label8;

     label1:
        $r1 = new android.os.Bundle;
        specialinvoke $r1.<android.os.Bundle: void <init>()>();
        virtualinvoke $r0.<de.ecspride.LocationLeak3: void onCreate(android.os.Bundle)>($r1);
        $r1 = null;

     label2:
        virtualinvoke $r0.<de.ecspride.LocationLeak3: void onResume()>();

     label3:
        $r2 = new de.ecspride.MyLocationListener;
        specialinvoke $r2.<de.ecspride.MyLocationListener: void <init>(de.ecspride.IDataProvider)>($r0);
        if $i0 == 1 goto label4;

        $r3 = null;
        $r4 = new android.location.Location;
        specialinvoke $r4.<android.location.Location: void <init>(android.location.Location)>($r3);
        virtualinvoke $r2.<de.ecspride.MyLocationListener: void onLocationChanged(android.location.Location)>($r4);
        $r4 = null;

     label4:
        if $i0 == 2 goto label3;

        if $i0 == 3 goto label3;

        if $i0 == 4 goto label5;

        if $i0 == 5 goto label2;

        if $i0 == 6 goto label1;

     label5:
        if $i0 == 7 goto label7;

        if $i0 == 8 goto label6;

        if $i0 == 9 goto label1;

     label6:
        if $i0 == 10 goto label2;

     label7:
        if $i0 == 11 goto label8;

     label8:
        if $i0 == 12 goto label0;

        return;
    }

Warning: java.lang.ref.Finalizer is a phantom class!
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
[Spark] Pointer Assignment Graph in 0.0 seconds.
[Spark] Type masks in 0.0 seconds.
[Spark] Pointer Graph simplified in 0.0 seconds.
[Spark] Propagation in 2.5 seconds.
[Spark] Solution found in 2.5 seconds.
Running incremental callback analysis for 1 components...
Incremental callback analysis done.
Transforming dummyMainClass... 
Transforming de.ecspride.LocationLeak3... 
Found 3 callback methods for 1 components
Entry point calculation done.
Created a SourceSinkManager with 127 sources, 61 sinks, and 3 callback methods.
Using 'android/android-17/android.jar' as android.jar
Warning: java.lang.ref.Finalizer is a phantom class!
de.ecspride.LocationLeak3
	<de.ecspride.LocationLeak3: void onCreate(android.os.Bundle)>
	<de.ecspride.MyLocationListener: void onLocationChanged(android.location.Location)>
	<de.ecspride.LocationLeak3: void onResume()>
[main] WARN soot.jimple.infoflow.entryPointCreators.AndroidEntryPointCreator - Ran into a constructor generation loop for class android.location.Location, substituting with null...
[main] WARN soot.jimple.infoflow.entryPointCreators.AndroidEntryPointCreator - Cannot create valid constructor for de.ecspride.IDataProvider, because it is an interface and cannot substitute with subclass
[main] WARN soot.jimple.infoflow.entryPointCreators.AndroidEntryPointCreator - Ran into a constructor generation loop for class android.location.Location, substituting with null...
[main] INFO soot.jimple.infoflow.entryPointCreators.AndroidEntryPointCreator - Generated main method:
    public static void dummyMainMethod()
    {
        int $i0;
        de.ecspride.LocationLeak3 $r0;
        android.os.Bundle $r1;
        de.ecspride.MyLocationListener $r2, $r5;
        android.location.Location $r3, $r4, $r6, $r7;

        $i0 = 0;

     label0:
        $r0 = new de.ecspride.LocationLeak3;
        specialinvoke $r0.<de.ecspride.LocationLeak3: void <init>()>();
        if $i0 == 0 goto label8;

     label1:
        $r1 = new android.os.Bundle;
        specialinvoke $r1.<android.os.Bundle: void <init>()>();
        virtualinvoke $r0.<de.ecspride.LocationLeak3: void onCreate(android.os.Bundle)>($r1);
        $r1 = null;

     label2:
        virtualinvoke $r0.<de.ecspride.LocationLeak3: void onResume()>();

     label3:
        $r2 = new de.ecspride.MyLocationListener;
        specialinvoke $r2.<de.ecspride.MyLocationListener: void <init>(de.ecspride.IDataProvider)>($r0);
        if $i0 == 1 goto label4;

        $r3 = null;
        $r4 = new android.location.Location;
        specialinvoke $r4.<android.location.Location: void <init>(android.location.Location)>($r3);
        virtualinvoke $r2.<de.ecspride.MyLocationListener: void onLocationChanged(android.location.Location)>($r4);
        $r4 = null;

     label4:
        if $i0 == 2 goto label3;

        if $i0 == 3 goto label3;

        if $i0 == 4 goto label5;

        if $i0 == 5 goto label2;

        if $i0 == 6 goto label1;

     label5:
        if $i0 == 7 goto label7;

        if $i0 == 8 goto label6;

        if $i0 == 9 goto label1;

     label6:
        if $i0 == 10 goto label2;

     label7:
        if $i0 == 11 goto label8;

     label8:
        $r5 = new de.ecspride.MyLocationListener;
        specialinvoke $r5.<de.ecspride.MyLocationListener: void <init>(de.ecspride.IDataProvider)>(null);
        if $i0 == 12 goto label11;

     label9:
        if $i0 == 13 goto label10;

        $r6 = null;
        $r7 = new android.location.Location;
        specialinvoke $r7.<android.location.Location: void <init>(android.location.Location)>($r6);
        virtualinvoke $r5.<de.ecspride.MyLocationListener: void onLocationChanged(android.location.Location)>($r7);
        $r7 = null;

     label10:
        if $i0 == 14 goto label9;

     label11:
        if $i0 == 15 goto label0;

        return;
    }

[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 39577
Initially reachable methods: 4
Classes with at least one reachable method: 4
[Spark] Pointer Assignment Graph in 0.0 seconds.
Total types: 5784
[Spark] Type masks in 0.0 seconds.
VarNodes: 21
FieldRefNodes: 1
AllocNodes: 11
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 11 nodes.
Now handling field references
Worklist has 10 nodes.
Now handling field references
Worklist has 56 nodes.
Now handling field references
Worklist has 2 nodes.
Now handling field references
[Spark] Propagation in 1.8 seconds.
[Spark] Solution found in 2.5 seconds.
[Spark] Number of reachable methods: 475
Total time to finish: 37.05
=================================================
# edges = 13
=================================================

elapsed time: 39.77s
