...
running Spark with Averroes for dacapo/bloat
Loading properties...
Generating the call graph from Spark.

Preparing classes ...
Adding application archive: /u/karim/workspace/averroes-home/benchmarks-averroes/dacapo/bloat-organized-app.jar
Adding placeholder library archive: /u/karim/workspace/averroes-home/benchmarks-averroes/dacapo/bloat-placeholder-lib.jar
[Call Graph] For information on where the call graph may be incomplete, use the verbose option to the cg phase.
Total methods: 4246
Initially reachable methods: 39
Classes with at least one reachable method: 39
[Spark] Pointer Assignment Graph in 0.7 seconds.
Total types: 556
[Spark] Type masks in 0.2 seconds.
VarNodes: 224
FieldRefNodes: 2
AllocNodes: 109
Cleaning up graph for merged nodes
Done cleaning up graph for merged nodes
[Spark] Pointer Graph simplified in 0.0 seconds.
Worklist has 109 nodes.
Now handling field references
Worklist has 1540 nodes.
Now handling field references
Worklist has 1110 nodes.
Now handling field references
Worklist has 490 nodes.
Now handling field references
Worklist has 693 nodes.
Now handling field references
Worklist has 283 nodes.
Now handling field references
Worklist has 34 nodes.
Now handling field references
[Spark] Propagation in 14.6 seconds.
[Spark] Solution found in 15.0 seconds.
[Spark] Number of reachable methods: 3022

elapsed time: 25.40s
